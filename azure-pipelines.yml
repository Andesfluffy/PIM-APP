# # azure-pipelines.yml - Azure DevOps Pipeline
# trigger:
#   - main

# variables:
#   azureSubscription: "your-azure-subscription"
#   functionAppName: "your-function-app-name"
#   resourceGroupName: "your-resource-group"

# stages:
#   - stage: Build
#     jobs:
#       - job: BuildFunctions
#         pool:
#           vmImage: "ubuntu-latest"
#         steps:
#           - task: NodeTool@0
#             inputs:
#               versionSpec: "18.x"
#             displayName: "Install Node.js"

#           - script: |
#               npm install
#               npm run build --if-present
#             displayName: "npm install and build"

#           - task: ArchiveFiles@2
#             displayName: "Archive files"
#             inputs:
#               rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
#               includeRootFolder: false
#               archiveType: zip
#               archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#               replaceExistingArchive: true

#           - task: PublishBuildArtifacts@1
#             inputs:
#               pathtoPublish: "$(Build.ArtifactStagingDirectory)"
#               artifactName: "drop"

#   - stage: Deploy
#     dependsOn: Build
#     condition: succeeded()
#     jobs:
#       - deployment: DeployFunctions
#         environment: "production"
#         pool:
#           vmImage: "ubuntu-latest"
#         strategy:
#           runOnce:
#             deploy:
#               steps:
#                 - task: AzureFunctionApp@1
#                   displayName: "Azure functions app deploy"
#                   inputs:
#                     azureSubscription: "$(azureSubscription)"
#                     appType: functionApp
#                     appName: "$(functionAppName)"
#                     package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"

# ---
# # .env.example - Environment variables template
# COSMOS_DB_CONNECTION_STRING=mongodb://your-cosmos-account:your-key@your-cosmos-account.mongo.cosmos.azure.com:10255/?ssl=true&retrywrites=false
# DATABASE_NAME=spa-database
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18.x'

jobs:
- job: BuildAndTest
  displayName: 'Build and Test Next.js App'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion)'
    displayName: 'Install Node.js'

  - script: npm ci
    displayName: 'Install dependencies'

  - script: npm run lint
    displayName: 'Run ESLint'
    continueOnError: true

  - script: npm run build
    displayName: 'Build Next.js app'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '.'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/nextjs-app.zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'nextjs-build'